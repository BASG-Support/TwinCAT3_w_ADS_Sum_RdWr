using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

using System.Collections;

using TwinCAT.Ads;

/// <summary>
/// We want to read from PLC 7 variables:
/// + (bool)Machine.HeightThreshold
/// + (bool)Machine.Cabinet_Open
/// + (double)Machine.Process_Temperature[1]
/// + (double)Machine.Process_Temperature[2]
/// + (double)Machine.Process_Temperature[3]
/// + (double)Machine.Process_Temperature[4]
/// + (double)Machine.Process_Temperature[5]
/// + Each variable is described by their ADS index group, their index group offset, and their data size. This allows the ADS router to search for the data.
/// + We are using the PLC Symbol by Variable Handle method (which is to read the PLC variable via its name), the Index Group is fixed as 0xF005. This is part of the BECKHOFF specification. The values are also predefined within an enum-type "AdsReservedIndexGroups". 
///     The groups values used by BECKHOFF are also defined within an enum "AdsReservedIndexGroups"
/// + The offset value is the handle generated by the router when using the ".CreateVariableHandle" method. 
/// + Data size is the number of bytes of data. Eg. short = 2, bool = 1, double = 8, and so on
/// We will also use the Sum-write command to send 2 PLC variables which will trigger some axis to move:
/// + (int)Machine.State_Request
/// + (int)Machine.Sequence_Request
/// </summary>
/// 
namespace HMI
{
    internal struct VariableInfo
    {
        /// <summary> About this structure
        /// + From the point of view of the TcAdsClient, the index group, index group offset, and data size  will sufficiently describe the PLC variable so that the ADS route is about to find the variables.
        /// + You will need these information Each PLC variable that you wish to read/write to using the SUM-READ/SUM-WRITE.
        /// + Since the Variable Handle is used, the Index Group will be fixed at 0xF005. This is a BECKHOFF ADS specification, therefore the value will be the same as long as the handles/PLC variable names are used.
        /// + The Index Group Offset is therefore the handle value that is generated by the .CreateVariableHande() method.
        /// + The data size is the number of bytes this PLC variable is.
        ///     bool = 1
        ///     short = 2
        ///     etc
        /// </summary>
        public int ADS_Index_Group;
        public int ADS_Index_Offset;
        public int Data_Size;
    }
    public partial class MainWindow : Window
    {
        TwinCAT.Ads.TcAdsClient tcClient = new TcAdsClient();
        AdsStream NotificationFromPlc = new AdsStream(255);
        int[] NotificationHandle = new int[3];

        VariableInfo[] ReadFromPlc = new VariableInfo[7];
        VariableInfo[] SendToPlc = new VariableInfo[2];

        bool[] Digital_Sensor = new bool[10];

        public MainWindow()
        {
            InitializeComponent();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (tcClient != null && tcClient.IsConnected && ReadFromPlc != null)
            {
                foreach (VariableInfo plcVar in ReadFromPlc)
                {
                    tcClient.DeleteVariableHandle(plcVar.ADS_Index_Offset);
                }
                foreach (int _handle in NotificationHandle)
                {
                    tcClient.DeleteDeviceNotification(_handle);
                }
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                tcClient.Connect(851);
            }
            catch (Exception)
            {
            }
            if (tcClient != null && tcClient.IsConnected)
            {
                #region Reading the string "Name" from the PLC
                int _handle = tcClient.CreateVariableHandle("Machine.Name");
                int[] args = { 80 };
                string _name = tcClient.ReadAny(0xF005, _handle, typeof(string), args).ToString();
                MachineName.Content = _name;
                tcClient.DeleteVariableHandle(_handle);
                #endregion
                #region Notifications
                NotificationHandle[0] = tcClient.AddDeviceNotification("Machine.State", NotificationFromPlc, AdsTransMode.OnChange, 50, 0, null);
                NotificationHandle[1] = tcClient.AddDeviceNotification("Machine.Sequence", NotificationFromPlc, AdsTransMode.OnChange, 50, 10, null);
                NotificationHandle[2] = tcClient.AddDeviceNotification("Machine.Digital_Sensor", NotificationFromPlc, AdsTransMode.OnChange, 50, 20, null);
                tcClient.AdsNotification += tcClient_AdsNotification;
                #endregion
                #region Create the handles
                ReadFromPlc[0].ADS_Index_Group = (int)AdsReservedIndexGroups.SymbolValueByHandle;
                ReadFromPlc[0].ADS_Index_Offset = tcClient.CreateVariableHandle("Machine.HeightThreshold");
                ReadFromPlc[0].Data_Size = 1;
                ReadFromPlc[1].ADS_Index_Group = (int)AdsReservedIndexGroups.SymbolValueByHandle;
                ReadFromPlc[1].ADS_Index_Offset = tcClient.CreateVariableHandle("Machine.Cabinet_Open");
                ReadFromPlc[1].Data_Size = 1;
                ReadFromPlc[2].ADS_Index_Group = (int)AdsReservedIndexGroups.SymbolValueByHandle;
                ReadFromPlc[2].ADS_Index_Offset = tcClient.CreateVariableHandle("Machine.Process_Temperature[1]");
                ReadFromPlc[2].Data_Size = 8;
                ReadFromPlc[3].ADS_Index_Group = (int)AdsReservedIndexGroups.SymbolValueByHandle;
                ReadFromPlc[3].ADS_Index_Offset = tcClient.CreateVariableHandle("Machine.Process_Temperature[2]");
                ReadFromPlc[3].Data_Size = 8;
                ReadFromPlc[4].ADS_Index_Group = (int)AdsReservedIndexGroups.SymbolValueByHandle;
                ReadFromPlc[4].ADS_Index_Offset = tcClient.CreateVariableHandle("Machine.Process_Temperature[3]");
                ReadFromPlc[4].Data_Size = 8;
                ReadFromPlc[5].ADS_Index_Group = (int)AdsReservedIndexGroups.SymbolValueByHandle;
                ReadFromPlc[5].ADS_Index_Offset = tcClient.CreateVariableHandle("Machine.Process_Temperature[4]");
                ReadFromPlc[5].Data_Size = 8;
                ReadFromPlc[6].ADS_Index_Group = (int)AdsReservedIndexGroups.SymbolValueByHandle;
                ReadFromPlc[6].ADS_Index_Offset = tcClient.CreateVariableHandle("Machine.Process_Temperature[5]");
                ReadFromPlc[6].Data_Size = 8;
                SendToPlc[0].ADS_Index_Group = (int)AdsReservedIndexGroups.SymbolValueByHandle;
                SendToPlc[0].ADS_Index_Offset = (int)tcClient.CreateVariableHandle("Machine.State_Request");
                SendToPlc[0].Data_Size = 2;
                SendToPlc[1].ADS_Index_Group = (int)AdsReservedIndexGroups.SymbolValueByHandle;
                SendToPlc[1].ADS_Index_Offset = (int)tcClient.CreateVariableHandle("Machine.Sequence_Request");
                SendToPlc[1].Data_Size = 2;
                #endregion
            }

        }

        private void tcClient_AdsNotification(object sender, AdsNotificationEventArgs e)
        {
            if (e.NotificationHandle == NotificationHandle[0])
            {
                AdsBinaryReader NotificationReader = new AdsBinaryReader(e.DataStream);
                State.Content = "State: " + NotificationReader.ReadInt16().ToString();
            }
            if (e.NotificationHandle == NotificationHandle[1])
            {
                AdsBinaryReader NotificationReader = new AdsBinaryReader(e.DataStream);
                Sequence.Content = "Sequence: " + NotificationReader.ReadInt16().ToString();
            }
            if (e.NotificationHandle == NotificationHandle[2])
            {
                AdsBinaryReader NotificationReader = new AdsBinaryReader(e.DataStream);
                for (int i = 0; i < Digital_Sensor.Length; i++)
                {
                    Digital_Sensor[i] = NotificationReader.ReadBoolean();
                }
                if (Digital_Sensor[0]) Digital1.Fill = new SolidColorBrush(Color.FromArgb(255, 255, 0, 0));
                else Digital1.Fill = new SolidColorBrush(Color.FromArgb(255, 125, 125, 125));
                if (Digital_Sensor[1]) Digital2.Fill = new SolidColorBrush(Color.FromArgb(255, 255, 0, 0));
                else Digital2.Fill = new SolidColorBrush(Color.FromArgb(255, 125, 125, 125));
                if (Digital_Sensor[2]) Digital3.Fill = new SolidColorBrush(Color.FromArgb(255, 255, 0, 0));
                else Digital3.Fill = new SolidColorBrush(Color.FromArgb(255, 125, 125, 125));
                if (Digital_Sensor[3]) Digital4.Fill = new SolidColorBrush(Color.FromArgb(255, 255, 0, 0));
                else Digital4.Fill = new SolidColorBrush(Color.FromArgb(255, 125, 125, 125));
                if (Digital_Sensor[4]) Digital5.Fill = new SolidColorBrush(Color.FromArgb(255, 255, 0, 0));
                else Digital5.Fill = new SolidColorBrush(Color.FromArgb(255, 125, 125, 125));
            }
        }
              
        #region ADS SUM READ
        /// <summary>
        /// + The ADS Sum Read Command is handled by index group 0xF080 in the ADS router.
        /// + You will basically need to write to this index group the PLC variable description (variable's index group, offset, size)
        ///     The description is arranged into a stream and the format is:
        ///     [Var1.IndexGroup][Var1.Offset][Var1.Size](Var2...)(Var3...)...
        ///     The size of the stream is therefore (n * ( 4 + 4 + 4)) = (n * 12)
        /// + You will then read back from this index group the actual data from the plc. The data returned will have 4 byte error code for each variable in addition to the actual data 
        ///     The data format is again in a stream and is arranged as such:
        ///     [Error code for Var1][Error code for Var2] ... [Var1 Data][Var2 Data] ...
        /// </summary>
        private void Read_Button_Click(object sender, RoutedEventArgs e)
        {
            int total_size_of_data_from_plc = ReadFromPlc.Length * 4; //The returned data size = (4 * Variable_Count) + (SizeOf Variable 1) + ... + (Sizeof Variable n) 
                                                                        //The addition 4n data size is to accomodate the extra error code
            #region Preparing the stream to send to the router

            AdsStream ToRouter = new AdsStream(ReadFromPlc.Length * 12); //For each variable, need to tell the route the index group (int = 4 bytes), offset (int = 4 bytes), size (int = 4 bytes)
            
            AdsBinaryWriter _streamWriter = new AdsBinaryWriter(ToRouter);
            
            foreach (VariableInfo _var in ReadFromPlc)
            {
                _streamWriter.Write(_var.ADS_Index_Group);
                _streamWriter.Write(_var.ADS_Index_Offset);
                _streamWriter.Write(_var.Data_Size);
                total_size_of_data_from_plc += _var.Data_Size;
            }
            #endregion
            #region Preparing the stream from the router

            AdsStream FromRouter = new AdsStream(total_size_of_data_from_plc);

            #endregion
            #region Execute the sum-read command *note the Index group for the ADS command is 0xF080
            tcClient.ReadWrite(0xF080, ReadFromPlc.Length, FromRouter, ToRouter); //The offset for the group is basically the number of variables to read
            #endregion
            #region Organize the received data

            AdsBinaryReader _StreamReader = new AdsBinaryReader(FromRouter);

            #region Read the error codes from the stream
            foreach (VariableInfo _var in ReadFromPlc) //First retrieve the error codes 
            {
                if (_StreamReader.ReadInt32() != (int)AdsErrorCode.NoError) ; //I will not do any error checking here
            }
            #endregion
            #region Read the actual data
            if (_StreamReader.ReadBoolean()) HeightThreshold.Fill = new SolidColorBrush(Color.FromArgb(255,255,0,0));
            else HeightThreshold.Fill = new SolidColorBrush(Color.FromArgb(255, 125, 125, 125));
            if (_StreamReader.ReadBoolean()) CabinetIsOpen.Fill = new SolidColorBrush(Color.FromArgb(255, 255, 0, 0));
            else CabinetIsOpen.Fill = new SolidColorBrush(Color.FromArgb(255, 125, 125, 125));
            ProcTemp1.Text = _StreamReader.ReadDouble().ToString();
            ProcTemp2.Text = _StreamReader.ReadDouble().ToString();
            ProcTemp3.Text = _StreamReader.ReadDouble().ToString();
            ProcTemp4.Text = _StreamReader.ReadDouble().ToString();
            ProcTemp5.Text = _StreamReader.ReadDouble().ToString();
            #endregion

            #endregion
        }
        #endregion

        #region ADS SUM WRITE
        /// <summary>
        /// + The ADS Sum Read Command is handled by index group 0xF081 in the ADS router.
        /// + You will basically need to write to this index group the PLC variable description (variable's index group, offset, size), followed by the data
        ///     The description is arranged into a stream and the format is:
        ///     [Var1.IndexGroup][Var1.Offset][Var1.Size](Var2...) ... (Var n)[Var1 Data][Var 2 Data]...[Var n data]
        ///     The size of the stream is therefore (n * ( 4 + 4 + 4)) + (s1 + s2 + ... + sn)= (n * 12) + (total data size)
        /// + You will then read back from this index group the 4 byte error code for each variable
        ///     The data format is again in a stream and is arranged as such:
        ///     [Error code for Var1][Error code for Var2] ... [Error code for Var n]
        ///     Total size = (n * 4)
        /// </summary>
        private void Write_Button_Click(object sender, RoutedEventArgs e)
        {
            #region Prepare "Read" AdsStream for the AdsReadWrite method

            AdsStream FromRouter = new AdsStream(SendToPlc.Length * 4);

            #endregion

            #region Prepare "Write" AdsStream for hte AdsReadWrite method 

            int total_send_size = SendToPlc.Length * (4 + 4 + 4); // The variable description
            foreach (VariableInfo _var in SendToPlc)
            {
                total_send_size += _var.Data_Size;
            }
            AdsStream ToRouter = new AdsStream(total_send_size);
            AdsBinaryWriter _StreamWriter = new AdsBinaryWriter(ToRouter);
            foreach (VariableInfo _var in SendToPlc)
            {
                _StreamWriter.Write(_var.ADS_Index_Group);
                _StreamWriter.Write(_var.ADS_Index_Offset);
                _StreamWriter.Write(_var.Data_Size);
            }
            _StreamWriter.Write((short)100);
            _StreamWriter.Write((short)1);

            #endregion

            #region ADS Sum-write, *note that the index group responsible for the write is 0xF081. NOT 0xF080.
            tcClient.ReadWrite(0xF081, SendToPlc.Length, FromRouter, ToRouter);
            #endregion

            //I will not be including any error checking here for the example

        }
        #endregion

    }
}
